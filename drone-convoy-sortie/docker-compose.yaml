version: '3.8'

services:
  # Frontend application
  drone-convoy-frontend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: drone-convoy-sortie
    ports:
      - "8080:80"
    restart: unless-stopped
    networks:
      - drone-network
    environment:
      - NODE_ENV=production
      - REACT_APP_VERSION=1.0.0
      - REACT_APP_BUILD_TIME=${BUILD_TIME:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drone-convoy.rule=Host(`convoy.local`)"
      - "traefik.http.services.drone-convoy.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Development hot-reload service (alternative to production build)
  drone-convoy-dev:
    image: node:18-alpine
    container_name: drone-convoy-dev
    working_dir: /app
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev"
    networks:
      - drone-network
    environment:
      - NODE_ENV=development
      - VITE_HOST=0.0.0.0
      - VITE_PORT=5173
    profiles:
      - dev
    stdin_open: true
    tty: true

  # Future: OpenCV Backend Service (Rust)
  drone-opencv-backend:
    image: rust:1.70-alpine
    container_name: drone-opencv-backend
    working_dir: /app
    ports:
      - "8081:8081"
    volumes:
      - ./backend:/app
    networks:
      - drone-network
    environment:
      - RUST_LOG=debug
      - OPENCV_LOG_LEVEL=0
    profiles:
      - backend
    command: sh -c "echo 'OpenCV Backend - Phase 2 Implementation'"

  # Future: Redis for real-time data
  redis:
    image: redis:7-alpine
    container_name: drone-redis
    ports:
      - "6379:6379"
    networks:
      - drone-network
    volumes:
      - redis_data:/data
    profiles:
      - backend
    command: redis-server --appendonly yes

  # Future: WebSocket service for real-time updates
  websocket-service:
    image: node:18-alpine
    container_name: drone-websocket
    working_dir: /app
    ports:
      - "8082:8082"
    networks:
      - drone-network
    profiles:
      - backend
    command: sh -c "echo 'WebSocket Service - Phase 2 Implementation'"

networks:
  drone-network:
    driver: bridge
    name: drone-convoy-network

volumes:
  redis_data:
    name: drone-convoy-redis-data

# Health check and monitoring
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s